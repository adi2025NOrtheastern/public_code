Group 15 submission

Members- 

Aditi Jain, Prerana Urs Praveen Kumar Urs, Rachit Singh, Saurav Dasgupta, Suhani Shah, Vikrant Vaze

Please find attached the required files:
1) A slide deck, containing highlights, to showcase the project - Group 15 DMDD Project.pptx
2) The up-to-date design document -  Group15_DatabaseDesign.pdf
3) The final ERD -  Group 15 - E-R Diagram.pdf
4) The SQL DDL statements for implementing the database -  Group_15_Database_Implementation.sql
5) At least two views for reporting purposes and the SQL DDL statements used to create them -  
code -Group15_Views.sqlScreenshot- View1.png, View2.png
6) At least two reports and visualizations 
Five files with extension .pbix and .png are uploaded.

maintain ease in
allocating executives
for the opted delivery
service. Age is
computed using the
DOB of the employee.
● CustomerCareOffice : None or
many employees can be playing
the role of a customer care
representative based on the
customer care services.
● Login : the login details of all the
employees except for delivery
executives in the organisation are
stored in the Login entity.
Cart
The Cart is used to
maintain and display
the list of all the
products that are
selected by the
customers from the
catalog. It shows the
selected product along
with the desired
quantity, price and
other key details.
The primary key for this entity is CartID
which is autogenerated. This entity
shares relationship with the below
mentioned entities :
● OrderHeader :As soon as the
customer places the order,the
Cart entity provides an unique
CartID in addition to customer
details to the OrderHeader entity
to create an order record.
● OrderItems : Cart entity
provides a cartID and the list of
corresponding products that are
included in the corresponding
order. A cart contains one or
more products for entry in
orderItems under one orderID.
● Customer : A cart is linked to a
customer with a one-to-one
relationship. One cart is created
by default for each customer for
them to add the products.
● Catalog : A customer can have a
single order from a single
store/restaurant at once. Hence,
the Cart entity can have one or
more products from a catalog.
Membership
Membership entity
maintains different
types of memberships
that are offered by the
organisation. It
includes information
about the membership
related offers that can
be redeemed by the
The primary key maintained in this entity
as MembershipID is auto-generated.
The relationships with other entities are
as follows :
● Promotions : This entity is
directly linked to the Promotions
entity through an associative
entity in order to avoid a
many-to-many relationship.
customer while placing
an order. It also stores
information regarding
the membership
validity.
Every membership can have
multiple promotions and each
promotion can be valid for more
than one membership..
● Customer : Unique
membershipID is generated for
each customer, thus having an
optional one to many relationship
between Membership and
Customer entities respectively.
MembershipPromo This entity acts as an
associative entity for
handling
many-to-many
relationship between
‘Membership’ and
‘Promotions’ entities.
This associative entity allows
each membership to have
multiple promotions and each
promotion can be valid for more
than one membership.
Product
This entity holds
complete details of the
product that are
available to the
Customer on the
catalog. Product details
include Product ID,
name, description,
weight, unit of
measure,etc.
ProductID being the primary key for
this entity, it finds relationship with the
below mentioned entity :
● Store: Product participates in a
many-to-many relationship with
Store which is denoted using an
associative
entity
Catalog
through which the products sold
by a store are mapped.
OrderHeader
This entity presents a
cumulative list of
active orders,
comprising all the
header level details of
the sales order such as
Total amount, Order
Status, Date of Order,
Date of order
completion,
membership and store
details. TotalAmount
attribute is a computed
column based on price
and quantity of all
products in an order.
Each time a customer submits an order,
an OrderID is system generated as the
primary key in the OrderHeader which
holds the following relationships -
● Cart : OrderHeader is linked to
the Cart entity through a
one-to-one relationship. An
unique order id will be generated
for every cart id and the header
level details will be fetched
corresponding to the cart id.
● OrderItems : OrderHeader has a
one-to-many relationship with the
OrderItems entity as one sales
order can have multiple items
ordered in it.
● DeliveryExecutive: OrderHeader
is linked to the
DeliveryExecutive entity for
assignment of the delivery
executive to the newly created
order.
● Invoice : OrderHeader will be
directly linked to Invoice through
a one-to-one relationship. An
unique invoice number will be
generated for every order id and
will be initiated for the customer
in the form of an invoice receipt.
● Feedback : OrderHeader will be
linked to the Feedback entity
through an optional one-to-one
relationship. This will store the
customer feedback provided for
the corresponding order.
OrderItems
This entity stores the
list of products ordered
in the corresponding
order id.
OrderItems holds the below
relationships -
● OrderHeader: OrderItems will
fetch the order id and the cart id
through a many-to-one
relationship as multiple products
from the same store/restaurant
can be ordered in a single order.
● Cart: Based on the order id and
cart id received from
OrderHeader, OrderItems will
fetch the product details from the
Cart. Every OrderID is linked to
only one CartID.
Payment
Payment entity
retrieves the payment
related details from
the Invoice entity will
have the details related
to payment like the
payment status, date,
unique payment ID,
thereby keeping a
record of the payment
made by the customer
based on the invoice
PaymentID is the primary key which
finds relationship with the following
entities :
● Invoice : Payment retrieves the
invoice details from the Invoice
entity on the basis of
‘InvoiceID’in a one-to-one
relationship.
Every order payment initiates an
invoice.
that has been
generated.
● Card : Payment retrieves the
details of the card from the Card
entity using ‘CardID’ for
payment transaction. Every saved
card of the customer is not
always used for payment unless
the order is finalised and further
processed to the OrderHeader
from the Cart.
Invoice
The invoice entity will
display the relevant
invoice details,
comprising the recent
orders placed by the
customer, it also
includes the additional
tax charges and
discounts, if
applicable. The
Invoicedate lets us
track the details about
when the invoice was
generated.
InvoiceID being the primary key of this
entity, would have following mentioned
relationship with other entities :
● OrderHeader : An invoice is
generated based on the order
details provided by the above
mentioned entities using
‘OrderID’ as the FK. There is a
one-to-one relationship.
● Payment : Invoice has
one-to-one mapping with the
Payment entity.
Card
The Card entity is used
to store the details of
the card/s that have
been stored for
making payments by
the customer.
ExpDate is a computed
column based on
ExpYear and
ExpMonth.
It has CardID as the primary key. It
relates to the Customer entity as follows:
● Customer : Card
stores‘CustomerID’ as FK
thereby ensuring a referential
integrity between the card and the
respective customer in a
one-to-one relationship
respectively.
● Payment : One card is used to
make one payment.
Store
This entity holds
information of
different products that
are supplied by each
store/restaurant based
on their availability
and location.
StoreId is defined as the primary key for
this entity, which has relationship with
the following mentioned entities :
● Location : Store’s location is
stored in the Location entity.
Everystore has a single location.
● Product: A store has several
products to sell. This
many-to-many relationship
between store and product is
stored in an associative entity -
Catalog.
CustomerCareOffic
e
This entity stores the
data related to all the
employees working as
customer care
representatives in the
organisation.
CCOfficeID is the primary key used to
connect with the Employee entity to
store the employee’s office details.
Feedback
The Feedback Entity
allows the customers
to provide feedback
about their delivery
experience.
There exists only one
feedback for each
Order.
FeedbackID acts as the Primary key
along with OrderID as the foreign key.
Relationship with other entity is as
follows:
● OrderHeader : Feedback can be
given by the customer
corresponding to a completed
order. There can be one feedback
for every order.
DeliveryExecutive This entity stores the
data of the employees
working as delivery
executives in the
organisation. It allows
the model to facilitate
efficient delivery of
orders based on their
availability also taking
into consideration the
current location of
particular delivery
executives.
EmployeeID acts as both Primary and
Foreign key. Relationship with other
entity is as follows:
● Location: Retrieves current
location of DeliveryExecutive.
Based on the current location of
the delivery executive the order
delivery duty is assigned.
● OrderHeader: Delivery
Executive is assigned to one or
more orders.
● Employee : DeliveryExceutive is
an employee.
Location
The entity consists of
master values defining
and maintaining the
locations of Customer,
Store, and Restaurants.
Each Customer, Store
or Restaurant has it’s
unique location.
LocationID being the Primary key. It
stores the location of deliveryExecutive,
Customer and store. Store has a location.
Customer has a location.
DeliveryExecutive has a location.
Login
This entity stores the
basic login related
information of the
customers and the
It uses LoginID as the primary key to
maintain unique login entries of both
customers and employees.
employees. For each
user, being a Customer
or an Employee, there
is only one login
associated uniquely.
Customer, Employees : Different
customer and employee id’s can be
verified to each of their categories by
linking CustomerID being the primary
key in Customer entity and EmployeeID
in the Employee entity and storing it in
the BusinessEntityId attribute in the
Login entity.
Promotions
Promotions entity
stores the details of all
the active promotions
and offers that could
be used by the
customer on different
products available on
the catalog.
PromotionID is the primary key for this
entity and it shares the below
relationships with other entities -
● Catalog : Any active promotions
or offers that could act on the
available products or stores is
reflected on the catalog directly.
Each catalog may either have
none or many promotions.
● Membership : Promotions entity
is entitled with Membership
entity using the
MembershipPromo as an
associative entity in a
