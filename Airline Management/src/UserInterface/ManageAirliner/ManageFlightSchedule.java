/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManageAirliner;

import Business.Airliner;
import Business.Airplane;
import Business.Fleet;
import Business.Flight;
import Business.FlightSchedule;
import java.awt.CardLayout;
import java.awt.Component;
import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Properties;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aditi
 */
public class ManageFlightSchedule extends javax.swing.JPanel {

    /**
     * Creates new form ManageFlightSchedule
     */
    
    JPanel userProcessContainer; 
    Flight flight; 
    Airliner airliner;
    List<FlightSchedule> flightScheduleList;
    FlightSchedule flightSchGlobal;
    Fleet airplaneList;
    public ManageFlightSchedule(JPanel userProcessContainer, Flight fs, Airliner airliner, List<FlightSchedule> fsl,Fleet airplaneList) {
        initComponents();
        this.flightScheduleList=fsl;
        this.flight=fs;
        this.userProcessContainer=userProcessContainer;
        this.airliner=airliner;
       // addDateComponent();
        schedulePanel.setVisible(false);
        vsPanel.setVisible(false);
        this.airplaneList=airplaneList;
        populateFlightSchedule();
    }

    public void populateFlightSchedule(){
        //lblAirlinerName.setText(airliner.getAirLinerName());
        //populate table
         DefaultTableModel model = (DefaultTableModel) tblFlightSchedule.getModel();
        model.setRowCount(0);
        //List<FlightSchedule> flightSchList = flight.getFlightSchedule();
        for (FlightSchedule s : flightScheduleList) {
            //check airline name in airplane
            if(s.getFlightNum().equals(flight.getFlightNum()))
            {
            Object row[] = new Object[6];
            row[0] = flight.getFlightName();
            row[1] = s.getSrc();
            row[2] = s.getDestination();
            
            try{
                SimpleDateFormat sdfrmt = new SimpleDateFormat("MM/dd/yyyy");
                sdfrmt.setLenient(false);
                String date = sdfrmt.format(s.getDate());
                row[3] = date;
            }catch(Exception e){
                row[3] = s.getDate();
            }
            
            row[4] = s.getTime();
            row[5] = s;//flight.getFlightNum();
            
            model.addRow(row); 
            }
            
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblFlightSchedule = new javax.swing.JTable();
        btnNewSchedule = new javax.swing.JButton();
        btnViewSchedule = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        schedulePanel = new javax.swing.JPanel();
        fromfield = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tofield = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        closebtn = new javax.swing.JButton();
        datefield = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cmbTime = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        cmbAirplane = new javax.swing.JComboBox<>();
        vsPanel = new javax.swing.JPanel();
        fromfield1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tofield1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        datefield1 = new javax.swing.JTextField();
        closeButton = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        cmbTimeUpdate = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 102, 102));

        tblFlightSchedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flight Name", "Source", "Destination", "Date", "Time", "Flight Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFlightSchedule);

        btnNewSchedule.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnNewSchedule.setText("New Schedule");
        btnNewSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewScheduleActionPerformed(evt);
            }
        });

        btnViewSchedule.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnViewSchedule.setText("View Schedule");
        btnViewSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewScheduleActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Manage Flight Schedule");

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnBack.setText("<Back");
        btnBack.setToolTipText("");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        schedulePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Add Schedule"));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("From:");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("To:");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Date:");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        closebtn.setText("Close");
        closebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closebtnActionPerformed(evt);
            }
        });

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Time:");

        cmbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Morning", "Evening", "Night" }));

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Airplane:");

        cmbAirplane.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Airplane1" }));

        javax.swing.GroupLayout schedulePanelLayout = new javax.swing.GroupLayout(schedulePanel);
        schedulePanel.setLayout(schedulePanelLayout);
        schedulePanelLayout.setHorizontalGroup(
            schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(schedulePanelLayout.createSequentialGroup()
                        .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbTime, 0, 105, Short.MAX_VALUE)
                            .addComponent(datefield, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tofield, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fromfield, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, schedulePanelLayout.createSequentialGroup()
                        .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(closebtn)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbAirplane, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        schedulePanelLayout.setVerticalGroup(
            schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tofield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(datefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cmbAirplane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closebtn)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );

        vsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "View Schedule"));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("From:");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("To:");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Date:");

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        cmbTimeUpdate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Morning", "Evening", "Night" }));

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Time:");

        javax.swing.GroupLayout vsPanelLayout = new javax.swing.GroupLayout(vsPanel);
        vsPanel.setLayout(vsPanelLayout);
        vsPanelLayout.setHorizontalGroup(
            vsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vsPanelLayout.createSequentialGroup()
                .addGroup(vsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vsPanelLayout.createSequentialGroup()
                        .addContainerGap(40, Short.MAX_VALUE)
                        .addComponent(closeButton))
                    .addGroup(vsPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(vsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(vsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUpdate)
                    .addGroup(vsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(fromfield1)
                        .addComponent(tofield1)
                        .addComponent(datefield1)
                        .addComponent(cmbTimeUpdate, 0, 96, Short.MAX_VALUE)))
                .addGap(22, 22, 22))
        );
        vsPanelLayout.setVerticalGroup(
            vsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(vsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromfield1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(vsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tofield1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(vsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(datefield1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(vsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cmbTimeUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(vsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(closeButton))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(btnBack)
                        .addGap(210, 210, 210)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(78, 78, 78)
                                        .addComponent(btnNewSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addComponent(schedulePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnViewSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(vsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNewSchedule)
                    .addComponent(btnViewSchedule))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(schedulePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewScheduleActionPerformed
        int select=tblFlightSchedule.getSelectedRow();
        if(select>=0)
        {   
           
           viewschedule();
           /*Fleet fleet=(Fleet)flightsTable.getValueAt(select, 0);
           fromfield1.setText(fleet.getSchedule().getSrc());
           tofield1.setText(fleet.getSchedule().getDest());
           String date=fleet.getSchedule().getDate().toString();
           datefield1.setText(date);  
           //JOptionPane.showMessageDialog(null, "schedule added successfully");*/
            
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a flight");          
            }
    }//GEN-LAST:event_btnViewScheduleActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        
        
         backAction();
    }                                       

    private void backAction(){
        userProcessContainer.remove(this);
        Component [] componentArray = userProcessContainer.getComponents();
        Component c = componentArray[componentArray.length-1];
        ManageFlightJPanel ms = (ManageFlightJPanel) c;
        ms.populateFlightTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    
   
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnNewScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewScheduleActionPerformed
        //int selectedrow=tblFlightSchedule.getSelectedRow();
        //if(selectedrow>=0)
        //{   
           schedulePanel.setVisible(true);        
                    
           //cmbAirplane populate
           
           populateCmbAirplane();
           
           
        //}
       // else {
         //   JOptionPane.showMessageDialog(null, "Please select a flight");
            
       // }
    }//GEN-LAST:event_btnNewScheduleActionPerformed
    
    public void populateCmbAirplane(){
        //String[] array = new String[arrayList.size()];
         List<String> al= new ArrayList<>();//.toArray(new String[custDir.getCustomerList().size()]); 
         for(Airplane ap: airplaneList.getAirplaneList() )
         {
             String airlinerName=airliner.getAirLinerName();
             if(ap.getAirlinerName().equals(airlinerName))
             {
                 al.add(ap.getAirplaneName());
             }
         }
         
         cmbAirplane.setModel(new DefaultComboBoxModel(al.toArray()));
    }
    
    
    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if(fromfield.getText().equals("") || tofield.getText().equals("") || datefield.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "fields cannot be empty");
        }
        else{
            try {
                //int selectedrow=tblFlightSchedule.getSelectedRow();
                //Flight flight=(Flight)tblFlightSchedule.getValueAt(selectedrow, 0);
                SimpleDateFormat sdfrmt = new SimpleDateFormat("MM/dd/yyyy");
                sdfrmt.setLenient(false);
                java.util.Date date = sdfrmt.parse(datefield.getText());
                

               

       // String strDate = formDate.format(System.currentTimeMillis()); // option 1
               Calendar cals = Calendar.getInstance();
//Displaying the actual date
              //  System.out.println("The original Date: " + cals.getTime());
//Using format() method for conversion
            String currentDate = sdfrmt.format(cals.getTime());
            //System.out.println("Formatted Date: " + currentDate);
            java.util.Date dateCurrent = sdfrmt.parse(currentDate);
            
               if(dateCurrent.compareTo(date) > 0){
                   JOptionPane.showMessageDialog(null, "Date must be greater than or equal to current date");
                   return;
               }
                
                
                FlightSchedule flightSch =new FlightSchedule();
                String from=fromfield.getText();
                String to=tofield.getText();
                //Date date=Date.valueOf(datefield.getText());
                
                
                
                
                flightSch.setSrc(from);
                flightSch.setDestination(to);
                flightSch.setDate(date);
                flightSch.setFlightNum(flight.getFlightNum());
                flightSch.setTime(cmbTime.getItemAt(cmbTime.getSelectedIndex()));
                String airplaneName = cmbAirplane.getItemAt(cmbAirplane.getSelectedIndex());
                for(Airplane a: airplaneList.getAirplaneList())
             {
                if(a.getAirplaneName().equals(airplaneName))
                {
                    flightSch.setAirplane(a);
                    break;
                }
            }
                flightScheduleList.add(flightSch);
                
                JOptionPane.showMessageDialog(null, "schedule added successfully");
                schedulePanel.setVisible(false);
                fromfield.setText("");
                tofield.setText("");
                datefield.setText("");
                populateFlightSchedule();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Date must be entered in MM/dd/yyyy format");
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void closebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closebtnActionPerformed
        schedulePanel.setVisible(false);
    }//GEN-LAST:event_closebtnActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        vsPanel.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        //flightSchGlobal.setDate(date);
        if(fromfield1.getText().equals("") || tofield1.getText().equals("") || datefield1.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "fields cannot be empty");
        }
        else{
            try {
                //int selectedrow=tblFlightSchedule.getSelectedRow();
                //Flight flight=(Flight)tblFlightSchedule.getValueAt(selectedrow, 0);
                FlightSchedule flightSch =flightSchGlobal;
                String from=fromfield1.getText();
                String to=tofield1.getText();
                //Date date=Date.valueOf(datefield.getText());
                SimpleDateFormat sdfrmt = new SimpleDateFormat("MM/dd/yyyy");
                sdfrmt.setLenient(false);
                java.util.Date date = sdfrmt.parse(datefield1.getText());
                
                Calendar cals = Calendar.getInstance();
//Displaying the actual date
              //  System.out.println("The original Date: " + cals.getTime());
//Using format() method for conversion
            String currentDate = sdfrmt.format(cals.getTime());
            //System.out.println("Formatted Date: " + currentDate);
            java.util.Date dateCurrent = sdfrmt.parse(currentDate);
            
               if(dateCurrent.compareTo(date) > 0){
                   JOptionPane.showMessageDialog(null, "Date must be greater than or equal to current date");
                   return;
               }
                
                
                
                flightSch.setSrc(from);
                flightSch.setDestination(to);
                flightSch.setDate(date);
                flightSch.setFlightNum(flight.getFlightNum());
                flightSch.setTime(cmbTimeUpdate.getItemAt(cmbTimeUpdate.getSelectedIndex()));
                //flight.getFlightSchedule().add(flightSch);
                
                JOptionPane.showMessageDialog(null, "schedule added successfully");
                //vsPanel.setVisible(false);
                //fromfield.setText("");
                //tofield.setText("");
                //datefield.setText("");
                populateFlightSchedule();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Date must be entered in MM/dd/yyyy format");
                System.out.println(e);
            }
        }
        
        
    }//GEN-LAST:event_btnUpdateActionPerformed
    
    public void viewschedule()
    {
        try { 
        vsPanel.setVisible(true);
        int select=tblFlightSchedule.getSelectedRow();
        FlightSchedule flightsch=(FlightSchedule)tblFlightSchedule.getValueAt(select, 5);
        flightSchGlobal=flightsch;
        fromfield1.setText(flightsch.getSrc());
        tofield1.setText(flightsch.getDestination());
        //String date=flight.getFlightSchedule().getDate().toString();
        
        SimpleDateFormat sdfrmt = new SimpleDateFormat("MM/dd/yyyy");
        sdfrmt.setLenient(false);
        String date = sdfrmt.format(flightsch.getDate());
                
        datefield1.setText(date);
        String timing = flightsch.getTime();
        if(timing.equals("Morning")) {  cmbTimeUpdate.setSelectedIndex(0);}
        else if(timing.equals("Night")) {  cmbTimeUpdate.setSelectedIndex(2);}
        else if(timing.equals("Evening")) {  cmbTimeUpdate.setSelectedIndex(1);}
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, "Flight is not scheduled");
            System.out.println(e);
        }
    }

    
    /*private void OldshowflightbuttonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        try{
            Airliner air=(Airliner)airlinerCombobox.getSelectedItem();
            DefaultTableModel dtm = (DefaultTableModel)tblFlightSchedule.getModel();
            dtm.setRowCount(0);
            for(Flight flight : air.getfArrayList()){
                Object[] row = new Object[dtm.getColumnCount()];
                row[0]=flight;
                row[1]=flight.getFlightNum();
                dtm.addRow(row);
            }
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, "Please select an airline");
        }

    }  */
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnNewSchedule;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnViewSchedule;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton closebtn;
    private javax.swing.JComboBox<String> cmbAirplane;
    private javax.swing.JComboBox<String> cmbTime;
    private javax.swing.JComboBox<String> cmbTimeUpdate;
    private javax.swing.JTextField datefield;
    private javax.swing.JTextField datefield1;
    private javax.swing.JTextField fromfield;
    private javax.swing.JTextField fromfield1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel schedulePanel;
    private javax.swing.JTable tblFlightSchedule;
    private javax.swing.JTextField tofield;
    private javax.swing.JTextField tofield1;
    private javax.swing.JPanel vsPanel;
    // End of variables declaration//GEN-END:variables
}


