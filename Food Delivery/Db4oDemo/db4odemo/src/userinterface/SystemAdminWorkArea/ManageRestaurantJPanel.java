/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.Customer.Customer;
import Business.DeliveryMan.DeliveryMan;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Employee.EmployeeDirectory;
import Business.Order.Order;
import Business.Restaurant.Restaurant;
import Business.Restaurant.RestaurantDirectory;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author cnakhare
 */
public class ManageRestaurantJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageRestaurantJPanel
     */
    public RestaurantDirectory restaurantDirectory;
    public JPanel container;
    public EcoSystem system;
    public EmployeeDirectory employeeDirectory;

    public ManageRestaurantJPanel(JPanel container, EcoSystem system, RestaurantDirectory restaurantDirectory) {
        initComponents();
        this.container = container;
        this.restaurantDirectory = restaurantDirectory;
        this.system = system;
        //this.employeeDirectory = employeeDirectory;

        populate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        restaurantJTable = new javax.swing.JTable();
        addRestaurantBtn = new javax.swing.JButton();
        viewRestaurantOrdersBtn = new javax.swing.JButton();
        viewRestaurantDetailsBtn = new javax.swing.JButton();
        deleteRestaurantBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestJTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(51, 204, 255));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("Restaurants");

        restaurantJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Restaurant Id", "Restaurant Name", "Username", "Manager Name", "Restaurant Phone", "Restaurant Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(restaurantJTable);

        addRestaurantBtn.setText("Add Restaurant");
        addRestaurantBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRestaurantBtnActionPerformed(evt);
            }
        });

        viewRestaurantOrdersBtn.setText("View Orders");
        viewRestaurantOrdersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRestaurantOrdersBtnActionPerformed(evt);
            }
        });

        viewRestaurantDetailsBtn.setText("View Details");
        viewRestaurantDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRestaurantDetailsBtnActionPerformed(evt);
            }
        });

        deleteRestaurantBtn.setText("Delete Restaurant");
        deleteRestaurantBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRestaurantBtnActionPerformed(evt);
            }
        });

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        workRequestJTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Receiver", "Status", "Result", "Restaurant Name", "Food Item", "Quantity", "Total Cost", "Delivery Man", "Order ID", "Comment"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workRequestJTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addRestaurantBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewRestaurantOrdersBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewRestaurantDetailsBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteRestaurantBtn)
                        .addGap(0, 490, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn)
                        .addGap(388, 388, 388)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 926, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(backBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addRestaurantBtn)
                    .addComponent(viewRestaurantOrdersBtn)
                    .addComponent(viewRestaurantDetailsBtn)
                    .addComponent(deleteRestaurantBtn))
                .addGap(90, 90, 90)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(198, 198, 198))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void populate() {
        DefaultTableModel model = (DefaultTableModel) restaurantJTable.getModel();

        model.setRowCount(0);
        //for (UserAccount ua : system.getUserAccountDirectory().getUserAccountList()) {
            for (Restaurant restaurant : system.getRestaurantDirectory().getRestaurantList()) {
                //if (restaurant.getId()==(ua.getEmployee().getName())) {
                    Object[] row = new Object[6];
                    row[0] = restaurant;//.getId();
                    row[1] = restaurant.getName();
                    row[2] = system.getUserAccountDirectory().getUserByEmployeeId(String.valueOf(restaurant.getManager().getId()));
                    row[3] = restaurant.getManager().toString();
                    row[4] = restaurant.getNumber();
                    row[5] = restaurant.getAddress();
                    //row[] = restaurant.getLicenseNo();
                    model.addRow(row);
               // }
           // }
        }
    }

    public void populateusername() {
        DefaultTableModel model = (DefaultTableModel) restaurantJTable.getModel();

        model.setRowCount(0);

    }


    private void addRestaurantBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRestaurantBtnActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) container.getLayout();
        CreateRestaurantJPanel createRestaurantJPanel = new CreateRestaurantJPanel(container, system, restaurantDirectory);
        container.add(createRestaurantJPanel);
        layout.next(container);
    }//GEN-LAST:event_addRestaurantBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        Component[] componentArray = container.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SystemAdminWorkAreaJPanel manageCustomersJPanel = (SystemAdminWorkAreaJPanel) component;
        manageCustomersJPanel.populateTree();
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_backBtnActionPerformed

    private void deleteRestaurantBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRestaurantBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = restaurantJTable.getSelectedRow();
        int count = restaurantJTable.getSelectedRowCount();
        if(count == 1){
            if (selectedRow >= 0) {
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete??", "Warning", selectionButton);
            if (selectionResult == JOptionPane.YES_OPTION) {
                //restaurantDirectory.deleteRestaurant(selectedRow,system);
                Restaurant cust1= (Restaurant)restaurantJTable.getValueAt(selectedRow,0);
                //deleteCustomer(selectedRow,system);
                UserAccount uac;
                uac = system.getUserAccountDirectory().getUserByEmployeeId(String.valueOf(cust1.getId()));
                restaurantDirectory.getRestaurantList().remove(cust1)    ;
                        system.getUserAccountDirectory().getUserAccountList().remove(uac);

                populate();
            }
        }
        }
         else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_deleteRestaurantBtnActionPerformed

    
     public void populateRequestTable(Restaurant rest){
        DefaultTableModel model = (DefaultTableModel) workRequestJTable1.getModel();
        model.setRowCount(0);
        for(Order order: system.getOrderDirectory().getOrderDirectory()){
            if(order.getRestaurant().getId()==(rest.getId())){
                Object[] row = new Object[11];
                    row[0] = order.getMessage();
                    row[1] = order.getReceiver();
                    row[2] = order.getStatus();
                    row[3] = (order.getResult() == null ? "Waiting" : order.getResult());
                    row[4] = order.getRestaurant().getName();
                    row[5] = order.getFoodItem().getItemName();
                    row[6] = order.getQuantity();
                    row[7] = order.getQuantity()* order.getFoodItem().getPrice();
                    row[8] = (order.getDeliveryMan() == null) ? "Not Assigned" : order.getDeliveryMan().getName();
                    row[9] = order;
                    row[10] = (order.getComment() == null ? "" : order.getComment());
                    model.addRow(row);
            }
        }
    }
    
    private void viewRestaurantOrdersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRestaurantOrdersBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = restaurantJTable.getSelectedRow();
        if(selectedRow<0              )
        {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
            return;
            
        }
        Restaurant rest =(Restaurant) restaurantJTable.getValueAt(selectedRow, 0);
        populateRequestTable(rest);
        
        
        
        
    }//GEN-LAST:event_viewRestaurantOrdersBtnActionPerformed

    private void viewRestaurantDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRestaurantDetailsBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = restaurantJTable.getSelectedRow();
        if (selectedRow >= 0) {
            CardLayout layout = (CardLayout) container.getLayout();
            Restaurant restaurant = (Restaurant) restaurantJTable.getValueAt(selectedRow, 0);//restaurantDirectory.getRestaurantId(selectedRow);
            ViewRestaurantsJPanel viewRestaurantsJPanel = new ViewRestaurantsJPanel(container, restaurant, restaurantDirectory);
            container.add(viewRestaurantsJPanel);
            layout.next(container);
        }else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_viewRestaurantDetailsBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRestaurantBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton deleteRestaurantBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable restaurantJTable;
    private javax.swing.JButton viewRestaurantDetailsBtn;
    private javax.swing.JButton viewRestaurantOrdersBtn;
    private javax.swing.JTable workRequestJTable1;
    // End of variables declaration//GEN-END:variables
}
