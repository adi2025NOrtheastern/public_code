/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.Customer.Customer;
import Business.Customer.CustomerDirectory;
import Business.DeliveryMan.DeliveryMan;
import Business.DeliveryMan.DeliveryManDirectory;
import Business.EcoSystem;
import Business.Order.Order;
import Business.Restaurant.Restaurant;
import Business.Restaurant.RestaurantDirectory;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author cnakhare
 */
public class ManageDeliveryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageDeliveryDirectory
     */
    JPanel container;
    EcoSystem system;
    CustomerDirectory customerDirectory;
    RestaurantDirectory restaurantDirectory;
    DeliveryManDirectory deliveryManDirectory;

    public ManageDeliveryJPanel(JPanel userProcessContainer, EcoSystem system, DeliveryManDirectory deliveryManDirectory) {
        initComponents();
        this.container = userProcessContainer;
        this.system = system;
        this.deliveryManDirectory = deliveryManDirectory;
        populate();
    }

    public void populate() {
        DefaultTableModel model = (DefaultTableModel) deliveryJTable.getModel();
        
        model.setRowCount(0);
        //for (UserAccount ua : system.getUserAccountDirectory().getUserAccountList()) {
            for (DeliveryMan deliveryMan : system.getDeliveryManDirectory().getDeliveryManList()) {
               // if (deliveryMan.getName().equalsIgnoreCase(ua.getEmployee().getName())) {
                    Object[] row = new Object[4];
                    row[0] = deliveryMan;
                    row[1] = deliveryMan.getName();
                    row[2] = deliveryMan.getPhoneNum();
                    //row[3] = deliveryMan.getRestaurant();
                    row[3] = system.getUserAccountDirectory().getUserByEmployeeId(String.valueOf(deliveryMan.getId()));
                    model.addRow(row);
                //}
            }
        //}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        deliveryJTable = new javax.swing.JTable();
        addBtn = new javax.swing.JButton();
        viewBtn = new javax.swing.JButton();
        viewOrdersBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDeliveryManOrder = new javax.swing.JTable();

        setBackground(new java.awt.Color(102, 204, 255));

        deliveryJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Delivery Man Id", "Delivery Man Name", "Delivery Man Contact No", "Username"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(deliveryJTable);

        addBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        addBtn.setText("Add Delivery Man");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        viewBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        viewBtn.setText("View Delivery Man");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        viewOrdersBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        viewOrdersBtn.setText("View Delivery Man Orders");
        viewOrdersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrdersBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        deleteBtn.setText("Delete Delivery Man");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("Delivery Man");

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        tblDeliveryManOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Delivery Man Id", "Delivery Man Name", "Customer Details", "OrderID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblDeliveryManOrder);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewOrdersBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backBtn)
                                .addGap(368, 368, 368)
                                .addComponent(jLabel1)))
                        .addGap(0, 131, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(backBtn))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(viewBtn)
                    .addComponent(viewOrdersBtn)
                    .addComponent(deleteBtn))
                .addGap(85, 85, 85)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(90, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) container.getLayout();
        CreateDeliveryManJPanel createDeliveryManJPanel = new CreateDeliveryManJPanel(container, system, deliveryManDirectory);
        container.add(createDeliveryManJPanel);
        layout.next(container);
    }//GEN-LAST:event_addBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        Component[] componentArray = container.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SystemAdminWorkAreaJPanel manageCustomersJPanel = (SystemAdminWorkAreaJPanel) component;
        manageCustomersJPanel.populateTree();
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_backBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = deliveryJTable.getSelectedRow();
            if (selectedRow >= 0) {
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete??", "Warning", selectionButton);
            if (selectionResult == JOptionPane.YES_OPTION) {
                DeliveryMan cust1= (DeliveryMan)deliveryJTable.getValueAt(selectedRow,0);
                //deleteCustomer(selectedRow,system);
                UserAccount uac;
                uac = system.getUserAccountDirectory().getUserByEmployeeId(String.valueOf(cust1.getId()));
                deliveryManDirectory.getDeliveryManList().remove(cust1)    ;
                        system.getUserAccountDirectory().getUserAccountList().remove(uac);

                populate();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = deliveryJTable.getSelectedRow();
            if (selectedRow >= 0) {
            CardLayout layout = (CardLayout) container.getLayout();
            DeliveryMan deliveryMan = deliveryManDirectory.getDeliveryManId(selectedRow);
            ViewDeliveryManJPanel viewDeliveryManJPanel = new ViewDeliveryManJPanel(container, deliveryMan, deliveryManDirectory);
            container.add(viewDeliveryManJPanel);
            layout.next(container);
        }
         else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_viewBtnActionPerformed

    private void viewOrdersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrdersBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = deliveryJTable.getSelectedRow();
            if (selectedRow >= 0) {
                if(system.getOrderDirectory().getOrderDirectory().isEmpty())
                {
                    JOptionPane.showMessageDialog(null, "Empty orderdirectory!!");
                    return;
                }
                DeliveryMan dm =(DeliveryMan) deliveryJTable.getValueAt(selectedRow, 0);
                populateOrders(dm);
                
            }
        else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
        
    }//GEN-LAST:event_viewOrdersBtnActionPerformed

    
   public void populateOrders(DeliveryMan deliveryMan)
   {
       DefaultTableModel model = (DefaultTableModel) tblDeliveryManOrder.getModel();
        
        model.setRowCount(0);
        //for (UserAccount ua : system.getUserAccountDirectory().getUserAccountList()) {
            for (Order ord : system.getOrderDirectory().getOrderDirectory()) {
                if(ord.getDeliveryMan() != null){
                if (deliveryMan.getId() ==(ord.getDeliveryMan().getId())) {
                    Object[] row = new Object[4];
                    row[0] = deliveryMan;
                    row[1] = deliveryMan.getName();
                    row[2] = ord.getCustomer().getName() + " " + ord.getCustomer().getId() ;
                    //row[3] = deliveryMan.getRestaurant();
                    row[3] = ord.getOrderId();
                    model.addRow(row);
                }
            }
            }
        //}
        if(model.getRowCount()==0)
        {
            JOptionPane.showMessageDialog(null, "No orders for delivery man!!");
            return;
        }
       
   }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTable deliveryJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblDeliveryManOrder;
    private javax.swing.JButton viewBtn;
    private javax.swing.JButton viewOrdersBtn;
    // End of variables declaration//GEN-END:variables
}
